# GitHub Action: Collect attachments and open a PR in one step

name: Issue Attachment Collector

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  collect-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Collect attachments, commit, open PR, and comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const https = require('https');
            const { execSync } = require('child_process');

            // Determine payload and text
            const payload     = context.payload.comment || context.payload.issue;
            const body        = payload.body || '';
            const issueNumber = context.payload.issue.number;
            const targetDir   = 'cs2';

            // Extract URLs of attachments
            const urls = Array.from(body.matchAll(/!\[[^\]]*\]\((https?:\/\/[^)]+)\)/g), m => m[1]);
            if (urls.length === 0) {
              console.log('No attachments found; exiting.');
              return;
            }

            // Create a branch for this issue
            const branch = `issue-${issueNumber}-attachments`;
            execSync(`git checkout -b ${branch}`);
            fs.mkdirSync(targetDir, { recursive: true });

            // Helper to download with redirect support
            async function download(url) {
              return new Promise((resolve, reject) => {
                const parsed = new URL(url);
                const opts = { hostname: parsed.hostname, path: parsed.pathname + parsed.search, headers: { 'User-Agent': 'github-script' } };
                https.get(opts, res => {
                  if ([301,302,307,308].includes(res.statusCode) && res.headers.location) {
                    return resolve(download(res.headers.location));
                  }
                  const chunks = [];
                  res.on('data', c => chunks.push(c));
                  res.on('end', () => {
                    const buffer = Buffer.concat(chunks);
                    let filename = path.basename(parsed.pathname);
                    if (!path.extname(filename) && res.headers['content-type']) {
                      const ext = res.headers['content-type'].split('/')[1].split(';')[0];
                      if (ext) filename += `.${ext}`;
                    }
                    const filePath = path.join(targetDir, filename);
                    fs.writeFileSync(filePath, buffer);
                    console.log(`Saved ${filename} (${buffer.length} bytes)`);
                    resolve(filename);
                  });
                }).on('error', reject);
              });
            }

            // Download all
            const saved = [];
            for (const url of urls) {
              console.log(`Downloading ${url}`);
              const name = await download(url);
              saved.push(name);
            }

            // Commit and push
            execSync('git config user.name "github-actions[bot]"');
            execSync('git config user.email "github-actions[bot]@users.noreply.github.com"');
            execSync(`git add ${targetDir}`);
            execSync(`git commit -m "Add attachments from issue #${issueNumber}"`);
            execSync(`git push -u origin ${branch}`);

            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              head:  branch,
              base:  context.payload.repository.default_branch,
              title: `Auto: Add attachments from issue #${issueNumber}`,
              body:  `This PR adds ${saved.length} file(s) attached in issue #${issueNumber}.`
            });

            // Comment back on issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: issueNumber,
              body: `âœ… Collected ${saved.length} file(s) into **${targetDir}/** and opened PR #${pr.number}: ${pr.html_url}`
            });
